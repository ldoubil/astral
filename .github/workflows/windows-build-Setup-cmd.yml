name: 🪟 构建 WindowsSetupCmd 应用

on:
  workflow_dispatch:
  # push:  # 每次 push 到仓库时触发
  #   tags:
  #     - 'v*'   # 指定触发分支

jobs:
  build:
    runs-on: windows-latest

    # 调整 GITHUB_TOKEN 的权限
    permissions:
      contents: write  # 允许写入仓库内容（上传文件）
      packages: write
      
    steps:
      - name: 🛠️ 检出代码仓库
        uses: actions/checkout@v4
          
      # 安装 Inno Setup
      - name: 🔧 安装 Inno Setup
        run: |
          choco install innosetup -y
          echo "Inno Setup 安装完成！"

      # 安装 Rust (使用rust-toolchain.toml文件自动管理版本)
      - name: 🦀 安装 Rust 工具链
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.89.0

      - name: 🐦 安装Flutter
        run: |
          echo "正在克隆Flutter稳定分支..."
          git clone https://github.com/flutter/flutter.git --branch 3.29.3 $env:GITHUB_WORKSPACE/flutter --depth 1

          echo "正在将Flutter添加到PATH..."
          echo "$env:GITHUB_WORKSPACE/flutter/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          echo "Flutter版本验证："
          & "$env:GITHUB_WORKSPACE/flutter/bin/flutter.bat" --version
        shell: pwsh

      # 安装 Flutter 依赖
      - name: 📦 安装 Flutter 依赖
        run: |
          echo "正在获取 Flutter 依赖..."
          flutter pub get
          echo "Flutter 依赖安装完成！"
        shell: pwsh

      # 编译 Flutter Windows 应用
      - name: 🛠️ 编译 Flutter Windows 应用
        run: |
          echo "正在编译 Flutter Windows Release 版本..."
          flutter build windows --release
          echo "Flutter Windows Release 编译完成！"
        shell: pwsh

      # 复制 DLL 文件到输出目录
      - name: 📂 复制 DLL 文件到 Release 目录
        run: |
          echo "正在复制 DLL 文件到 Release 目录..."
          $dllSourceDir = "$env:GITHUB_WORKSPACE\dlls"
          $releaseDir = "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release"
          Copy-Item -Path "$dllSourceDir\*" -Destination $releaseDir -Recurse -Force
          echo "DLL 文件已复制到 $releaseDir！"

      # 创建 Inno Setup 脚本
      - name: 📝 创建 Inno Setup 脚本
        run: |
          echo "正在创建 Inno Setup 脚本..."
          $version = Get-Content "$env:GITHUB_WORKSPACE\pubspec.yaml" | Select-String -Pattern "version: (.*)" | ForEach-Object { $_.Matches.Groups[1].Value }
          
          $scriptContent = @"
          ; Inno Setup 脚本文件
          #define MyAppName "Astral"
          #define MyAppVersion "$version"
          #define MyAppPublisher "kevin"
          #define MyAppURL "https://astral.fan/"
          #define MyAppExeName "astral.exe"
          #define MyAppAssocName MyAppName + "文件"
          #define MyAppAssocExt ".Astral"
          #define MyAppAssocKey StringChange(MyAppAssocName, " ", "") + MyAppAssocExt

          [Setup]
          AppId={{9A41EC10-FBE6-4B63-8B18-A466907374B5}
          AppName={#MyAppName}
          AppVersion={#MyAppVersion}
          AppPublisher={#MyAppPublisher}
          AppPublisherURL={#MyAppURL}
          AppSupportURL={#MyAppURL}
          AppUpdatesURL={#MyAppURL}
          DefaultDirName={autopf}\\{#MyAppName}
          UninstallDisplayIcon={app}\\{#MyAppExeName}
          ArchitecturesAllowed=x64compatible
          ArchitecturesInstallIn64BitMode=x64compatible
          ChangesAssociations=yes
          DisableProgramGroupPage=yes
          OutputBaseFilename=Astralsetup
          SolidCompression=yes
          WizardStyle=modern

          [Languages]
          Name: "chinese"; MessagesFile: "D:\ChineseSimplified.isl"

          [Tasks]
          Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"

          [Files]
          Source: "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
          Source: "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release\Ak.dll"; DestDir: "{app}"; Flags: ignoreversion
          Source: "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release\app_links_plugin.dll"; DestDir: "{app}"; Flags: ignoreversion
          Source: "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release\flutter_localization_plugin.dll"; DestDir: "{app}"; Flags: ignoreversion
          Source: "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release\flutter_windows.dll"; DestDir: "{app}"; Flags: ignoreversion
          Source: "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release\isar.dll"; DestDir: "{app}"; Flags: ignoreversion
          Source: "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release\isar_flutter_libs_plugin.dll"; DestDir: "{app}"; Flags: ignoreversion
          Source: "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release\Packet.dll"; DestDir: "{app}"; Flags: ignoreversion
          Source: "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release\rust_lib_astral.dll"; DestDir: "{app}"; Flags: ignoreversion
          Source: "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release\screen_retriever_windows_plugin.dll"; DestDir: "{app}"; Flags: ignoreversion
          Source: "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release\sentry.dll"; DestDir: "{app}"; Flags: ignoreversion
          Source: "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release\system_tray_plugin.dll"; DestDir: "{app}"; Flags: ignoreversion
          Source: "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release\url_launcher_windows_plugin.dll"; DestDir: "{app}"; Flags: ignoreversion
          Source: "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release\window_manager_plugin.dll"; DestDir: "{app}"; Flags: ignoreversion
          Source: "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release\wintun.dll"; DestDir: "{app}"; Flags: ignoreversion
          Source: "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release\data\*"; DestDir: "{app}\data"; Flags: ignoreversion recursesubdirs createallsubdirs
          [Registry]
          Root: HKA; Subkey: "Software\Classes\{#MyAppAssocExt}\OpenWithProgids"; ValueType: string; ValueName: "{#MyAppAssocKey}"; ValueData: ""; Flags: uninsdeletevalue
          Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}"; ValueType: string; ValueName: ""; ValueData: "{#MyAppAssocName}"; Flags: uninsdeletekey
          Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\{#MyAppExeName},0"
          Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\{#MyAppExeName}"" ""%1"""

          [Icons]
          Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
          Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
          "@
          $scriptContent | Out-File -FilePath "$env:GITHUB_WORKSPACE\setup.iss" -Encoding utf8
          echo "Inno Setup 脚本已创建！"

      # 编译 Inno Setup 安装程序
      - name: 🔨 编译 Inno Setup 安装程序
        run: |
          echo "正在编译 Inno Setup 安装程序..."
          # 下载中文语言文件
          # 下载中文语言文件到 D: 根目录
          curl -o D:\ChineseSimplified.isl https://raw.githubusercontent.com/jrsoftware/issrc/main/Files/Languages/Unofficial/ChineseSimplified.isl
          # 编译安装程序
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "$env:GITHUB_WORKSPACE\setup.iss"
          echo "Inno Setup 安装程序编译完成！"



      # 上传 Inno Setup 安装程序作为 Artifact
      - name: 📤 上传 Inno Setup 安装程序
        uses: actions/upload-artifact@v4
        with:
          name: astral-windows-x64-setup-cmd
          path: ${{ github.workspace }}/Output/Astralsetup.exe
      # 创建 GitHub Release 并上传文件
      - name: 📢 创建 GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ github.workspace }}/Output/Astralsetup.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
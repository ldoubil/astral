name: 🐧 构建 Linux 应用

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*' # 当推送版本标签时触发

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: 🛠️ 检出代码仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: 🦀 设置 Rust 工具链
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.89.0

      # 确保环境变量正确设置
      - name: 🎯 设置环境变量
        run: |
          echo "RUSTUP_HOME=$HOME/.rustup" >> $GITHUB_ENV
          echo "CARGO_HOME=$HOME/.cargo" >> $GITHUB_ENV

      # 使用bash脚本确保Rust环境
      - name: 🛠️ 确保正确的Rust环境
        run: |
          chmod +x ./scripts/setup_rust_env.sh
          ./scripts/setup_rust_env.sh

      - name: 📦 安装系统依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ninja-build libgtk-3-dev
          sudo apt-get install -y clang cmake pkg-config libcurl4-openssl-dev
          sudo apt-get install -y protobuf-compiler
          # 只安装 ayatana 版本的依赖
          sudo apt-get install -y libayatana-appindicator3-dev
          # 移除冲突的包
          # sudo apt-get install -y libappindicator3-dev
          # 添加 patchelf
          sudo apt-get install -y patchelf
          sudo apt-get install -y ruby-dev
          sudo gem install --no-document fpm
          sudo apt-get install -y fuse libfuse2

      - name: 🐦 安装 Flutter
        run: |
          git clone https://github.com/flutter/flutter.git -b stable $HOME/flutter
          echo "$HOME/flutter/bin" >> $GITHUB_PATH
          export PATH="$HOME/flutter/bin:$PATH"
          chmod +x $HOME/flutter/bin/flutter
          flutter --version

      - name: 🎯 启用 Linux 桌面支持
        run: |
          flutter config --enable-linux-desktop
          flutter create --platforms=linux .

      - name: 📚 安装 Flutter 依赖
        run: |
          flutter pub get

      - name: 🛠️ 构建 Linux 应用
        run: |
          # 验证使用的Rust版本
          rustc --version
          flutter build linux --release

      - name: 📦 打包应用
        run: |
          mkdir -p release
          cd build/linux/x64/release/bundle
          # 修补链接
          patchelf astral --add-needed libisar.so --add-needed librust_lib_astral.so
          tar -czf $GITHUB_WORKSPACE/release/astral-linux-x64.tar.gz *
          echo "打包完成，检查文件大小："
          ls -lh $GITHUB_WORKSPACE/release/

      - name: 📦 打包 deb 包
        run: |
          mkdir -p release
          fpm -s dir -t deb -n astral -v 1.0.0 --prefix /opt/astral -C build/linux/x64/release/bundle .
          mv *.deb $GITHUB_WORKSPACE/release/astral-linux-x64.deb

      - name: 📦 打包 rpm 包
        run: |
          fpm -s dir -t rpm -n astral -v 1.0.0 --prefix /opt/astral -C build/linux/x64/release/bundle .
          mv *.rpm $GITHUB_WORKSPACE/release/astral-linux-x64.rpm

      - name: 📤 上传所有 Linux 构建产物
        uses: actions/upload-artifact@v4
        with:
          name: astral-linux-x64-all
          path: |
            release/astral-linux-x64.tar.gz
            release/astral-linux-x64.deb
            release/astral-linux-x64.rpm
          retention-days: 7
name: 🪟 构建 Windows 应用

on:
  workflow_dispatch:
  push:  # 每次 push 到仓库时触发
    tags:
      - 'v*'   # 指定触发分支

jobs:
  build:
    runs-on: windows-latest

    # 调整 GITHUB_TOKEN 的权限
    permissions:
      contents: write  # 允许写入仓库内容（上传文件）
      packages: write
      
    steps:
      - name: 🛠️ 检出代码仓库
        uses: actions/checkout@v4

      # 安装 Rust (使用rust-toolchain.toml文件自动管理版本)
      - name: 🦀 安装 Rust 工具链
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.89.0

      # 确保环境变量正确设置
      - name: 🎯 设置环境变量
        run: |
          echo "RUSTUP_HOME=$env:USERPROFILE\.rustup" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CARGO_HOME=$env:USERPROFILE\.cargo" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      # 使用PowerShell脚本确保Rust环境
      - name: 🛠️ 确保正确的Rust环境
        run: |
          .\scripts\setup_rust_env.ps1
        shell: pwsh

      # 安装Flutter
      - name: 🐦 安装Flutter
        run: |
          echo "正在克隆Flutter稳定分支..."
          git clone https://github.com/flutter/flutter.git --branch 3.29.3 $env:GITHUB_WORKSPACE/flutter --depth 1

          echo "正在将Flutter添加到PATH..."
          echo "$env:GITHUB_WORKSPACE/flutter/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          echo "Flutter版本验证："
          & "$env:GITHUB_WORKSPACE/flutter/bin/flutter.bat" --version
        shell: pwsh

      # 安装 Flutter 依赖
      - name: 📦 安装 Flutter 依赖
        run: |
          echo "正在获取 Flutter 依赖..."
          flutter pub get
          echo "Flutter 依赖安装完成！"
        shell: pwsh

      # 编译 Flutter Windows 应用
      - name: 🛠️ 编译 Flutter Windows 应用
        run: |
          echo "正在编译 Flutter Windows Release 版本..."
          # 验证使用的Rust版本
          rustc --version
          flutter build windows --release
          echo "Flutter Windows Release 编译完成！"
        shell: pwsh

      # 复制 DLL 文件到输出目录
      - name: 📂 复制 DLL 文件到 Release 目录
        run: |
          echo "正在复制 DLL 文件到 Release 目录..."
          $dllSourceDir = "$env:GITHUB_WORKSPACE\dlls"
          $releaseDir = "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release"
          Copy-Item -Path "$dllSourceDir\*" -Destination $releaseDir -Recurse -Force
          echo "DLL 文件已复制到 $releaseDir！"

      # 压缩 Release 目录
      - name: 📦 压缩 Release 目录
        run: |
          echo "正在压缩 Release 目录..."
          $releaseDir = "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release"
          $zipFile = "$env:GITHUB_WORKSPACE\astral-windows-x64-zip.zip"
          Compress-Archive -Path "$releaseDir\*" -DestinationPath $zipFile -Force
          echo "Release 目录已压缩为 $zipFile！"

      # 上传压缩后的 Release 目录作为 Artifact
      - name: 📤 上传压缩后的 Release 目录
        uses: actions/upload-artifact@v4
        with:
          name: astral-windows-x64-zip
          path: ${{ github.workspace }}/astral-windows-x64-zip.zip
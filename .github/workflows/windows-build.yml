name: 🪟 构建 Windows 应用

on:
  workflow_dispatch:
  push:  # 每次 push 到仓库时触发
    tags:
      - 'v*'   # 指定触发分支

jobs:
  build:
    runs-on: windows-latest

    # 调整 GITHUB_TOKEN 的权限
    permissions:
      contents: write  # 允许写入仓库内容（上传文件）
      packages: write
      
    steps:
      - name: 🛠️ 检出代码仓库
        uses: actions/checkout@v4

      # 安装 Rust
      - name: 🦀 安装 Rust 1.89.0
        run: |
          # 先清理可能存在的旧版本
          if (Get-Command rustup -ErrorAction SilentlyContinue) {
            Write-Host "卸载现有Rust安装..."
            rustup self uninstall -y
          }
          
          # 通过rustup安装指定版本的Rust
          Write-Host "下载并安装Rust 1.89.0..."
          curl.exe -sSf https://sh.rustup.rs -o rustup-init.exe
          .\rustup-init.exe -y --default-toolchain 1.89.0 --profile minimal
          Remove-Item .\rustup-init.exe
          
          # 将Rust添加到PATH并加载环境
          $env:PATH = "$env:USERPROFILE\.cargo\bin;" + $env:PATH
          echo "$env:USERPROFILE\.cargo\bin" >> $env:GITHUB_PATH
          
          # 加载rust环境
          if (Test-Path "$env:USERPROFILE\.cargo\env.ps1") {
            . "$env:USERPROFILE\.cargo\env.ps1"
          }
        shell: pwsh

      # 验证 Rust 安装
      - name: 🔍 验证 Rust 安装
        run: |
          # 确保使用正确的工具链
          rustup default 1.89.0
          
          # 验证版本
          Write-Host "Rust 版本："
          rustc --version
          Write-Host "Cargo 版本："
          cargo --version
          
          # 设置环境变量
          echo "CARGO_NET_GIT_FETCH_WITH_CLI=true" >> $env:GITHUB_ENV
          echo "RUST_BACKTRACE=1" >> $env:GITHUB_ENV
        shell: pwsh

      # 安装 Flutter
      - name: 🐦 安装 Flutter
        run: |
          echo "正在克隆 Flutter 稳定分支..."
          git clone https://github.com/flutter/flutter.git --branch 3.29.3 $env:GITHUB_WORKSPACE/flutter --depth 1

          echo "正在将 Flutter 添加到 PATH..."
          echo "$env:GITHUB_WORKSPACE/flutter/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          echo "Flutter 版本验证："
          & "$env:GITHUB_WORKSPACE/flutter/bin/flutter.bat" --version
        shell: pwsh

      # 安装构建工具
      - name: 🛠️ 安装构建工具
        run: |
          choco install ninja cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          echo "CMake 版本验证："
          cmake --version
        shell: pwsh

      # 安装 Flutter 依赖
      - name: 📦 安装 Flutter 依赖
        run: |
          echo "正在获取 Flutter 依赖..."
          flutter pub get
          echo "Flutter 依赖安装完成！"
        shell: pwsh

      # 编译 Flutter Windows 应用
      - name: 🛠️ 编译 Flutter Windows 应用
        run: |
          echo "正在编译 Flutter Windows Release 版本..."
          flutter build windows --release --verbose
          echo "Flutter Windows Release 编译完成！"
        shell: pwsh

      # 复制 DLL 文件到输出目录
      - name: 📂 复制 DLL 文件到 Release 目录
        run: |
          echo "正在复制 DLL 文件到 Release 目录..."
          $dllSourceDir = "$env:GITHUB_WORKSPACE\dlls"
          $releaseDir = "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release"
          Copy-Item -Path "$dllSourceDir\*" -Destination $releaseDir -Recurse -Force
          echo "DLL 文件已复制到 $releaseDir！"

      # 压缩 Release 目录
      - name: 📦 压缩 Release 目录
        run: |
          echo "正在压缩 Release 目录..."
          $releaseDir = "$env:GITHUB_WORKSPACE\build\windows\x64\runner\Release"
          $zipFile = "$env:GITHUB_WORKSPACE\astral-windows-x64-zip.zip"
          Compress-Archive -Path "$releaseDir\*" -DestinationPath $zipFile -Force
          echo "Release 目录已压缩为 $zipFile！"

      # 上传压缩后的 Release 目录作为 Artifact
      - name: 📤 上传压缩后的 Release 目录
        uses: actions/upload-artifact@v4
        with:
          name: astral-windows-x64-zip
          path: ${{ github.workspace }}/astral-windows-x64-zip.zip